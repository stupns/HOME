# """ Метакласс — это классы, экземпляры которых являются классами. С помощью метаклассов программисты получают
#  возможность создавать классы своего собственного типа из предопределенных классов Python. Например, если у вас есть
#   объект MyClass,  вы можете создать метакласс MyKls, который переопределяет поведение MyClass так, как вам нужно.
#
# Давайте разберемся с этим подробно.
#
# Что было понятнее можно сказать что, метакласс это такая штука, которая создают объекты-классы. В Python все является
#  объектом. Если мы пишем a = 5, тогда type(a) возвращает <type ‘int’>, что означает, что переменная a имеет тип int.
#   Однако type(int) возвращает <type ‘type’>, что означает наличие метакласса, поскольку int является классом типа type.
# Определение класса определяется его метаклассом, поэтому, когда мы хотим создать класс с помощью строки кода class A…,
#  Python создает его с помощью A = type (name, base, dict), где:
# • name: это название класса
# • base: это базовый класс
# • dict: это атрибуты класса
#
# Теперь, если у класса есть предопределенный метакласс (по имени MetaKls), Python создает класс с помощью
#  A = MetaKls(name, base, dict). """
#
#
# class MyInt(type):
#     def __call__(cls, *args, **kwds):
#         print("***** Here's My int *****", args)
#         print("Now do whatever you want with these objects...")
#         return type.__call__(cls, *args, **kwds)
#
#
# class int(metaclass=MyInt):
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#
# i = int(4, 5)


